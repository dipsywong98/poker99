{"version":3,"sources":["../node_modules/peerjs/dist sync","Poker99Action.ts","types.ts","Poker99State.ts","constants.ts","cards/bomb.ts","cards/normal.ts","cards/pm.ts","cards/reverse.ts","cards/skip.ts","cards/target.ts","cards/spade1.ts","Poker99Reducer.ts","utils.ts","aiAction.ts","withPoker99Network.tsx","Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Poker99ActionType","Suit","Poker99State","maxPlayer","minPlayer","turn","direction","points","dead","drawDeck","trashDeck","playerDeck","logs","GenericBoardGameState","cardPoints","1","2","3","4","5","6","7","8","9","10","11","12","13","bomb","card","state","number","isBombCard","withEndTurn","withIncrementTurn","isNormalCard","suit","SPADE","includes","normal","isPmCard","pm","increase","undefined","reverse","isReverseCard","skip","isSkipCard","target","playerId","isTargetCard","spade1","isSpade1Card","withDrawCard","prevState","length","players","shift","shuffle","push","withDiscardCard","filter","nextPlayerId","current","cards","min","Infinity","index","forEach","k","next","minPossible","map","join","Object","started","winner","Poker99Reducer","action","peerId","type","GameActionTypes","START","deck","getFullDeck","withInitGame","PLAY_CARD","payload","cardStr","find","compose","playCard","withPlayCard","nameDict","members","JSON","parse","stringify","END","isSkippingCard","aiAction","normalCards","sort","a","b","card13","c","pmCards","name","Poker99Context","createContext","usePoker99","network","useContext","Game","dispatch","dispatchAs","myPlayerId","myLocals","hideDeck","setHideDeck","error","setError","renderedDeckId","useState","setTarget","increment","setIncrement","d","handleError","message","clickCard","then","catch","renderDeck","onClick","again","style","pointerEvents","color","fontWeight","textDecorationLine","slice","s","App","Component","WithGameNetwork","props","useBoardGameNetwork","Provider","value","displayName","withPoker99Network","gameAppState","fullPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b2352a6.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 179;","// Poker99Action.ts\r\n\r\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { Card } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum Poker99ActionType {\r\n  PLAY_CARD,\r\n  END,\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  card: Card\r\n  increase?: boolean\r\n  target?: number\r\n}\r\n\r\nexport type Poker99Action = (({\r\n  type: Poker99ActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: Poker99ActionType.END\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload } from './Poker99Action'\r\n\r\nexport enum Suit {\r\n  SPADE,\r\n  HEART,\r\n  CLUB,\r\n  DIAMOND\r\n}\r\n\r\nexport interface Card {\r\n  suit: Suit\r\n  number: number\r\n}\r\n\r\nexport type Deck = Card[]\r\n\r\nexport type StateMapper = (prevState: Poker99State) => Poker99State\r\n\r\nexport type IsCard = (card: Card) => boolean\r\n\r\nexport type PlayCard = (payload: PlayCardPayload, playerId: number) => StateMapper\r\n","// Poker99State.ts\r\n\r\nimport { GenericBoardGameState } from 'gamenet'\r\nimport { Deck } from './types'\r\n\r\nexport class Poker99State extends GenericBoardGameState {\r\n  maxPlayer = 4\r\n  minPlayer = 4\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  dead: Record<number, true> = {}\r\n  drawDeck: Deck = []\r\n  trashDeck: Deck = []\r\n  playerDeck: Deck[] = []\r\n  logs: string[] = []\r\n}\r\n","export const cardPoints: Record<number, number> = {\r\n  1: 1, // spade set 1\r\n  2: 2,\r\n  3: 3,\r\n  4: 0, // reverse\r\n  5: 0, // target\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10, // +- 10\r\n  11: 0, //  skip\r\n  12: 20, // +=20\r\n  13: 99 //   set to 99\r\n}\r\n\r\nexport const maxCard = 5\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isBombCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 13\r\n}\r\n\r\nexport const bomb: PlayCard = ({ card }) => state => {\r\n  if (isBombCard(card)) {\r\n    state.points = 99\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isNormalCard: IsCard = (card: Card): boolean => {\r\n  if (card.suit === Suit.SPADE && card.number === 1) {\r\n    return false\r\n  } else {\r\n    return [1, 2, 3, 6, 7, 8, 9].includes(card.number)\r\n  }\r\n}\r\n\r\nexport const normal: PlayCard = ({ card }) => state => {\r\n  if (isNormalCard(card)) {\r\n    const points = state.points + cardPoints[card.number]\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isPmCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 10 || card.number === 12\r\n}\r\n\r\nexport const pm: PlayCard = ({ card, increase }) => state => {\r\n  if (isPmCard(card)) {\r\n    if (increase === undefined) {\r\n      throw new Error('increase is required in payload')\r\n    }\r\n    const points = state.points + (increase ? cardPoints[card.number] : -cardPoints[card.number])\r\n    if (points > 99) {\r\n      throw new Error('playing this card will exceed 99')\r\n    }\r\n    return withEndTurn(withIncrementTurn({ ...state, points }))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isReverseCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 4\r\n}\r\n\r\nexport const reverse: PlayCard = ({ card }) => state => {\r\n  if (isReverseCard(card)) {\r\n    state.direction *= -1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSkipCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 11\r\n}\r\n\r\nexport const skip: PlayCard = ({ card }) => state => {\r\n  if (isSkipCard(card)) {\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard } from '../types'\r\nimport { withEndTurn } from '../Poker99Reducer'\r\n\r\nexport const isTargetCard: IsCard = (card: Card): boolean => {\r\n  return card.number === 5\r\n}\r\n\r\nexport const target: PlayCard = ({ card, target }, playerId) => state => {\r\n  if (isTargetCard(card)) {\r\n    if (target === undefined) {\r\n      throw new Error('target is required in payload')\r\n    }\r\n    if (target === playerId) {\r\n      throw new Error('cannot target myself')\r\n    }\r\n    state.turn = target\r\n    return withEndTurn(state)\r\n  }\r\n  return state\r\n}\r\n","import { Card, IsCard, PlayCard, Suit } from '../types'\r\nimport { withEndTurn, withIncrementTurn } from '../Poker99Reducer'\r\n\r\nexport const isSpade1Card: IsCard = (card: Card): boolean => {\r\n  return card.number === 1 && card.suit === Suit.SPADE\r\n}\r\n\r\nexport const spade1: PlayCard = ({ card }) => state => {\r\n  if (isSpade1Card(card)) {\r\n    state.points = 1\r\n    return withEndTurn(withIncrementTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload, Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Deck, PlayCard, StateMapper, Suit } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { maxCard } from './constants'\r\nimport { minPossible } from './utils'\r\nimport { bomb } from './cards/bomb'\r\nimport { normal } from './cards/normal'\r\nimport { pm } from './cards/pm'\r\nimport { reverse } from './cards/reverse'\r\nimport { skip } from './cards/skip'\r\nimport { target } from './cards/target'\r\nimport { spade1 } from './cards/spade1'\r\n\r\nconst getFullDeck = (): Deck => {\r\n  const deck: Deck = []\r\n  for (let suit = 0; suit < 4; suit++) {\r\n    for (let number = 1; number <= 13; number++) {\r\n      deck.push({ suit, number })\r\n    }\r\n  }\r\n  return deck\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => StateMapper = playerId => prevState => {\r\n  if (prevState.playerDeck[playerId].length >= maxCard) {\r\n    throw new Error(`cannot draw, ${prevState.players[playerId]} already has ${maxCard} cards`)\r\n  }\r\n  const card = prevState.drawDeck.shift()\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...prevState, drawDeck: shuffle(prevState.trashDeck), trashDeck: [] })\r\n  } else {\r\n    prevState.playerDeck[playerId].push(card)\r\n    return { ...prevState }\r\n  }\r\n}\r\n\r\nconst withInitGame: StateMapper = (prevState: Poker99State) => {\r\n  prevState = {\r\n    ...prevState,\r\n    drawDeck: [],\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    points: 0,\r\n    direction: 1,\r\n    turn: 0,\r\n    dead: {},\r\n    logs: ['game started'],\r\n    winner: null\r\n  }\r\n  prevState.drawDeck = shuffle(getFullDeck())\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    for (let k = 0; k < maxCard; k++) {\r\n      prevState = withDrawCard(id)(prevState)\r\n    }\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: PlayCard = ({ card }, playerId) => state => {\r\n  state.trashDeck.push(card)\r\n  state.playerDeck[playerId] = state.playerDeck[playerId].filter(({ suit, number }) => !(suit === card.suit && number === card.number))\r\n  return state\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => StateMapper = (playerId, payload) => prevState => {\r\n  const { card } = payload\r\n  const cardStr = `${Suit[card.suit]}${card.number}`\r\n  if (prevState.playerDeck[playerId].find(({ suit, number }) => suit === card.suit && number === card.number) === undefined) {\r\n    throw new Error(`${prevState.players[playerId]} doesnt own card ${cardStr}`)\r\n  }\r\n  if (prevState.turn !== playerId) {\r\n    throw new Error('not your turn')\r\n  }\r\n  return compose(\r\n    withDrawCard(playerId),\r\n    ...[withDiscardCard, bomb, normal, pm, reverse, skip, target, spade1].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n}\r\n\r\nexport const withIncrementTurn: StateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.maxPlayer + prevState.direction) % prevState.maxPlayer\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nexport const withEndTurn: StateMapper = prevState => {\r\n  if (!prevState.dead[prevState.turn] && minPossible(prevState.points, prevState.playerDeck[prevState.turn])[0] > 99) {\r\n    prevState.logs.push(`${prevState.players[prevState.turn]} die, his card: ${prevState.playerDeck[prevState.turn].map(card => (\r\n      `${Suit[card.suit]}${card.number}`)\r\n    ).join(',')}`)\r\n    prevState.dead[prevState.turn] = true\r\n  }\r\n  if (Object.keys(prevState.dead).length === prevState.players.length - 1 && prevState.started) {\r\n    prevState.winner = [0, 1, 2, 3].filter(k => !prevState.dead[k])[0]\r\n  }\r\n  if (prevState.dead[prevState.turn]) {\r\n    return withEndTurn(withIncrementTurn({ ...prevState, turn: prevState.turn }))\r\n  } else {\r\n    return { ...prevState, turn: prevState.turn }\r\n  }\r\n}\r\n\r\nexport const Poker99Reducer: NetworkReducer<Poker99State, Poker99Action> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case Poker99ActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\r\n    case Poker99ActionType.END:\r\n      return { ...prevState, started: false }\r\n  }\r\n  return prevState\r\n}\r\n","import { Card, Suit } from './types'\r\nimport { cardPoints } from './constants'\r\n\r\nexport const minPossible = (current: number, cards: Card[]): number[] => {\r\n  let min = Infinity\r\n  let index = 0\r\n  cards.forEach(({ suit, number }, k) => {\r\n    let next\r\n    if (suit === Suit.SPADE && number === 1) {\r\n      next = 1\r\n    } else if (number === 10) {\r\n      next = current - 10\r\n    } else if (number === 12) {\r\n      next = current - 20\r\n    } else if (number === 13) {\r\n      next = 99\r\n    } else {\r\n      next = current + cardPoints[number]\r\n    }\r\n    if (next < min) {\r\n      min = next\r\n      index = k\r\n    }\r\n  })\r\n  return [min, index]\r\n}\r\n","import { Poker99State } from './Poker99State'\r\nimport { Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Card } from './types'\r\nimport { cardPoints } from './constants'\r\nimport { shuffle } from 'gamenet'\r\nimport { isNormalCard } from './cards/normal'\r\nimport { isPmCard } from './cards/pm'\r\n\r\nconst isSkippingCard = (card: Card): boolean => {\r\n  return [4, 5, 11, 13].includes(card.number)\r\n}\r\n\r\nexport const aiAction = (state: Poker99State, turn: number): Poker99Action => {\r\n  const cards = state.playerDeck[turn]\r\n  const points = state.points\r\n  const normalCards = cards.filter(isNormalCard).sort((a, b) => cardPoints[b.number] - cardPoints[a.number])\r\n  const card13 = cards.find(c => c.number === 13)\r\n  if (card13 !== undefined) {\r\n    if (points !== 99 && normalCards.length < 3) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card: card13\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const card of normalCards) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const pmCards = cards.filter(isPmCard)\r\n  for (const card of pmCards.sort((a, b) => b.number - a.number)) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: true\r\n        }\r\n      })\r\n    }\r\n  }\r\n  {\r\n    const card = cards.find(isSkippingCard)\r\n    if (card !== undefined) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          target: state.nameDict[shuffle(state.players.filter((name, id) => !state.dead[id] && id !== turn))[0]]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  for (const card of pmCards.sort((a, b) => a.number - b.number)) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  for (const card of cards) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  throw new Error('reached an edge case')\r\n}\r\n","import React, { createContext, FunctionComponent, useContext } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { Poker99Reducer } from './Poker99Reducer'\r\nimport { Poker99Action } from './Poker99Action'\r\nimport { aiAction } from './aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<Poker99State, Poker99Action> | null>(null)\r\n\r\nexport const withPoker99Network = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(Poker99Reducer, new Poker99State(), aiAction)\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n    </Poker99Context.Provider>\r\n  )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<Poker99State, Poker99Action> => {\r\n  const network: BoardGameContextInterface<Poker99State, Poker99Action> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withPoker99Network before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import React, { FunctionComponent, ReactNode, useState } from 'react'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport { Card, Suit } from './types'\r\nimport { Poker99Action, Poker99ActionType } from './Poker99Action'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [target, setTarget] = useState(0)\r\n  const [increment, setIncrement] = useState(true)\r\n  const d = state.direction === 1 ? '>' : '<'\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  const clickCard = (card: Card) => async () => {\r\n    const action: Poker99Action = {\r\n      type: Poker99ActionType.PLAY_CARD,\r\n      payload: {\r\n        card,\r\n        increase: increment,\r\n        target\r\n      }\r\n    }\r\n    if (state.turn === myPlayerId) {\r\n      await dispatch(action).then(() => setError('')).catch(handleError)\r\n    } else if (myLocals.includes(state.players[state.turn])) {\r\n      await dispatchAs(state.turn, action).then(() => setError('')).catch(handleError)\r\n    } else {\r\n      setError('Not my turn')\r\n    }\r\n  }\r\n  const renderDeck = (playerId: number): ReactNode => state.playerDeck[playerId]?.map(card => (\r\n    <button key={card.number * 10 + card.suit} onClick={clickCard(card)}>\r\n      {Suit[card.suit]} {card.number}\r\n    </button>\r\n  ))\r\n  const renderLocalDeck = (): ReactNode => {\r\n    return hideDeck ? <button onClick={() => setHideDeck(false)}>show {state.players[renderedDeckId]}</button>\r\n      : renderDeck(renderedDeckId)\r\n  }\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: Poker99ActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all' }}>\r\n      <div>\r\n        <h3>{state.points}</h3>\r\n        <h6>{state.players[state.turn]}{'\\''}s turn</h6>\r\n        {error !== '' && <div style={{ color: 'red' }}>{error}</div>}\r\n        {state.winner !== undefined && state.winner !== null && <div>winner is {state.players[state.winner]}\r\n          <button onClick={again}>again</button>\r\n        </div>}\r\n        {state.players.map((name, id) => (\r\n          <span\r\n            key={name}\r\n            onClick={() => setTarget(id)}\r\n            style={{\r\n              fontWeight: state.turn === id ? 'bold' : 'normal',\r\n              textDecorationLine: state.dead[id] ? 'line-through' : 'none'\r\n            }}>\r\n          {name} {d}\r\n        </span>\r\n        ))}\r\n        <div>\r\n          {\r\n            myLocals.length === 0\r\n              ? renderDeck(myPlayerId)\r\n              : renderLocalDeck()\r\n          }\r\n        </div>\r\n        <div>\r\n          target: {target}\r\n        </div>\r\n        <button onClick={() => setIncrement(!increment)}>\r\n          {increment ? '+' : '-'}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withPoker99Network } from './withPoker99Network'\nimport { GamePagesSlider, Home, Room } from 'gamenet-material'\nimport { Game } from './Game'\n\nconst App: FunctionComponent = withPoker99Network(() => {\n  const network = usePoker99()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]}>\n      <Home {...network} />\n      <Room {...network} />\n      <Game/>\n    </GamePagesSlider>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}