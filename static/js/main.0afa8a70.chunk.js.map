{"version":3,"sources":["../node_modules/peerjs/dist sync","Poker99Action.ts","types.ts","Poker99State.ts","constants.ts","cards/spade1.ts","cards/bomb.ts","cards/reverse.ts","cards/target.ts","cards/skip.ts","utils.ts","cards/normal.ts","cards/pm.ts","Poker99Reducer.ts","aiAction.ts","withPoker99Network.tsx","components/Card.tsx","components/Deck.tsx","components/PlayCardAdditionalModal.tsx","Game.tsx","usePromise.ts","components/GameRenderer.tsx","i18ns/index.ts","i18ns/en.tsx","i18ns/zh.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Poker99ActionType","ISuit","Poker99State","maxPlayer","minPlayer","turn","direction","points","dead","drawDeck","trashDeck","playerDeck","logs","lastAction","GenericBoardGameState","cardPoints","1","2","3","4","5","6","7","8","9","10","11","12","13","numberString","suitString","CLUB","SPADE","HEART","DIAMOND","suitColor","isSpade1Card","card","number","suit","spade1","playerId","state","withLog","players","printCard","withEndTurn","withIncrementTurn","isBombCard","bomb","isReverseCard","reverse","isTargetCard","target","undefined","isSkipCard","skip","hintText","isNormalCard","includes","normal","isPmCard","pm","increase","delta","withDrawCard","prevState","length","shift","shuffle","push","withDiscardCard","filter","nextPlayerId","current","cards","min","Infinity","index","forEach","k","next","minPossible","map","join","Object","started","winner","log","Poker99Reducer","action","peerId","type","GameActionTypes","START","deck","getFullDeck","withInitGame","PLAY_CARD","payload","cardStr","find","nextState","compose","playCard","withPlayCard","nameDict","members","JSON","parse","stringify","END","isSkippingCard","aiAction","normalCards","sort","a","b","card13","c","pmCards","name","Poker99Context","createContext","usePoker99","network","useContext","useStyle","makeStyles","root","padding","width","height","borderRadius","cursor","userSelect","transition","transformOrigin","Card","style","onClick","disabled","classes","Paper","elevation","color","pointerEvents","className","fontFamily","margin","PlaceHolder","useState","setWidth","startAnimation","setStartAnimation","useEffect","setTimeout","maxWidth","minWidth","position","transform","top","left","Deck","onCardClick","hide","reveal","playedIndex","setPlayedIndex","hovering","setHovering","handleCardClick","then","catch","console","error","message","withMaxWidth","children","noPad","onMouseEnter","onTouchStart","onMouseLeave","onTouchEnd","bottom","right","zIndex","IconButton","display","Visibility","justifyContent","flexWrap","Grid","item","PlayCardAdditionalModal","open","onClose","targets","chooseIncrease","Dialog","aria-labelledby","DialogTitle","DialogContent","container","Button","DialogActions","Game","dispatch","dispatchAs","myPlayerId","myLocals","hideDeck","setHideDeck","setError","renderedDeckId","throttledRenderedId","setTrottledRenderedId","handleError","again","modalCard","setModalCard","reject","setPromise","Promise","usePromise","makePromise","maxHeight","slice","s","DialogContentText","GameRenderer","prevCardPayload","setPrevCardPayload","startAnimateCard","setStartAnimateCard","showAnimateCard","setShowAnimateCard","m4","center","Name","useCallback","offset","isHisTurn","textDecorationLine","backgroundColor","textAlign","fontSize","Loop","i18ns","en","gamenetI18n","poker99","howToPlay","howToPlayContent","zh","App","withGamenetI18n","Component","WithGameNetwork","props","useBoardGameNetwork","myAis","n","window","clearTimeout","Provider","value","displayName","withPoker99Network","i18n","useGamenetI18n","gameAppState","fullPage","gameName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0afa8a70.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 196;","// Poker99Action.ts\r\n\r\nimport { GameActionTypes, GenericBoardGameAction } from 'gamenet'\r\nimport { ICard } from './types'\r\nimport { NetworkAction } from 'smnet'\r\n\r\nexport enum Poker99ActionType {\r\n  PLAY_CARD,\r\n  END,\r\n}\r\n\r\nexport interface PlayCardPayload {\r\n  card: ICard\r\n  increase?: boolean\r\n  target?: number\r\n}\r\n\r\nexport type Poker99Action = (({\r\n  type: Poker99ActionType.PLAY_CARD\r\n  payload: PlayCardPayload\r\n} | {\r\n  type: Poker99ActionType.END\r\n} | {\r\n  type: GameActionTypes\r\n  payload: never\r\n}) & NetworkAction) | GenericBoardGameAction\r\n","import { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload } from './Poker99Action'\r\n\r\nexport enum ISuit {\r\n  SPADE,\r\n  HEART,\r\n  CLUB,\r\n  DIAMOND\r\n}\r\n\r\nexport interface ICard {\r\n  suit: ISuit\r\n  number: number\r\n}\r\n\r\nexport type IDeck = ICard[]\r\n\r\nexport type IStateMapper = (prevState: Poker99State) => Poker99State\r\n\r\nexport type IsCard = (card: ICard) => boolean\r\n\r\nexport type IPlayCard = (payload: PlayCardPayload, playerId: number) => IStateMapper\r\n","// Poker99State.ts\r\n\r\nimport { GenericBoardGameState } from 'gamenet'\r\nimport { IDeck } from './types'\r\nimport { PlayCardPayload } from './Poker99Action'\r\n\r\nexport class Poker99State extends GenericBoardGameState {\r\n  maxPlayer = 4\r\n  minPlayer = 4\r\n  turn = 0\r\n  direction = 1\r\n  points = 0\r\n  dead: Record<number, true> = {}\r\n  drawDeck: IDeck = []\r\n  trashDeck: IDeck = []\r\n  playerDeck: IDeck[] = []\r\n  logs: string[] = []\r\n  lastAction: PlayCardPayload & { playerId: number } | null = null\r\n}\r\n","import { ISuit } from './types'\r\n\r\nexport const cardPoints: Record<number, number> = {\r\n  1: 1, // spade set 1\r\n  2: 2,\r\n  3: 3,\r\n  4: 0, // reverse\r\n  5: 0, // target\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10, // +- 10\r\n  11: 0, //  skip\r\n  12: 20, // +=20\r\n  13: 99 //   set to 99\r\n}\r\n\r\nexport const numberString: Record<number, string> = {\r\n  1: 'A',\r\n  2: '2',\r\n  3: '3',\r\n  4: '4',\r\n  5: '5',\r\n  6: '6',\r\n  7: '7',\r\n  8: '8',\r\n  9: '9',\r\n  10: '10',\r\n  11: 'J',\r\n  12: 'Q',\r\n  13: 'K'\r\n}\r\n\r\nexport const suitString: Record<ISuit, string> = {\r\n  [ISuit.CLUB]: '♣',\r\n  [ISuit.SPADE]: '♠',\r\n  [ISuit.HEART]: '♥',\r\n  [ISuit.DIAMOND]: '♦'\r\n}\r\n\r\nexport const suitColor: Record<ISuit, string> = {\r\n  [ISuit.CLUB]: 'black',\r\n  [ISuit.SPADE]: 'black',\r\n  [ISuit.HEART]: 'red',\r\n  [ISuit.DIAMOND]: 'red'\r\n}\r\n\r\nexport const playerColor = ['red', 'yellow', 'green', 'blue']\r\n\r\nexport const maxCard = 5\r\n","import { ICard, IPlayCard, IsCard, ISuit } from '../types'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isSpade1Card: IsCard = (card: ICard): boolean => {\r\n  return card.number === 1 && card.suit === ISuit.SPADE\r\n}\r\n\r\nexport const spade1: IPlayCard = ({ card }, playerId) => state => {\r\n  if (isSpade1Card(card)) {\r\n    state.points = 1\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)}, points set to 1`)(withEndTurn(withIncrementTurn(state)))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, IPlayCard, IsCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isBombCard: IsCard = (card: ICard): boolean => {\r\n  return card.number === 13\r\n}\r\n\r\nexport const bomb: IPlayCard = ({ card }, playerId) => state => {\r\n  if (isBombCard(card)) {\r\n    state.points = 99\r\n    return withLog(`${state.players[playerId]} played bomb card ${printCard(card)}, set point to 99`)(withEndTurn(withIncrementTurn(state)))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, IPlayCard, IsCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isReverseCard: IsCard = (card: ICard): boolean => {\r\n  return card.number === 4\r\n}\r\n\r\nexport const reverse: IPlayCard = ({ card }, playerId) => state => {\r\n  if (isReverseCard(card)) {\r\n    state.direction *= -1\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)}, reverse direction`)(withEndTurn(withIncrementTurn(state)))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, IPlayCard, IsCard } from '../types'\r\nimport { withEndTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isTargetCard: IsCard = (card: ICard): boolean => {\r\n  return card.number === 5\r\n}\r\n\r\nexport const target: IPlayCard = ({ card, target }, playerId) => state => {\r\n  if (isTargetCard(card)) {\r\n    if (target === undefined) {\r\n      throw new Error('target is required in payload')\r\n    }\r\n    if (target === playerId) {\r\n      throw new Error('cannot target myself')\r\n    }\r\n    state.turn = target\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)}, set current turn ${state.players[target]}`)(withEndTurn(state))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, IPlayCard, IsCard } from '../types'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isSkipCard: IsCard = (card: ICard): boolean => {\r\n  return card.number === 11\r\n}\r\n\r\nexport const skip: IPlayCard = ({ card }, playerId) => state => {\r\n  if (isSkipCard(card)) {\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)}, skip`)(withEndTurn(withIncrementTurn(state)))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, ISuit } from './types'\r\nimport { cardPoints, numberString, suitString } from './constants'\r\nimport { isSpade1Card } from './cards/spade1'\r\nimport { isBombCard } from './cards/bomb'\r\nimport { isReverseCard } from './cards/reverse'\r\nimport { isTargetCard } from './cards/target'\r\nimport { isSkipCard } from './cards/skip'\r\nimport React from 'react'\r\n\r\nexport const minPossible = (current: number, cards: ICard[]): number[] => {\r\n  let min = Infinity\r\n  let index = 0\r\n  cards.forEach(({ suit, number }, k) => {\r\n    let next\r\n    if (suit === ISuit.SPADE && number === 1) {\r\n      next = 1\r\n    } else if (number === 10) {\r\n      next = current - 10\r\n    } else if (number === 12) {\r\n      next = current - 20\r\n    } else if (number === 13) {\r\n      next = 99\r\n    } else {\r\n      next = current + cardPoints[number]\r\n    }\r\n    if (next < min) {\r\n      min = next\r\n      index = k\r\n    }\r\n  })\r\n  return [min, index]\r\n}\r\n\r\nexport const hintText = (card: ICard): React.ReactNode => {\r\n  if(isSpade1Card(card)) {\r\n    return '→ 1'\r\n  }else if(isReverseCard(card)){\r\n    return '↻ reverse'\r\n  }else if(isTargetCard(card)){\r\n    return '⛶ target'\r\n  }else if(isSkipCard(card)){\r\n    return '× skip'\r\n  }else if(isBombCard(card)) {\r\n    return '→ 99'\r\n  }else if(card.number === 10) {\r\n    return '± 10'\r\n  }else if(card.number === 12) {\r\n    return '± 20'\r\n  } else {\r\n    return `+ ${card.number}`\r\n  }\r\n}\r\n\r\nexport const printCard = (card: ICard): string => {\r\n  return `${suitString[card.suit]} ${numberString[card.number]}`\r\n}\r\n","import { ICard, IPlayCard, IsCard, ISuit } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isNormalCard: IsCard = (card: ICard): boolean => {\r\n  if (card.suit === ISuit.SPADE && card.number === 1) {\r\n    return false\r\n  } else {\r\n    return [1, 2, 3, 6, 7, 8, 9].includes(card.number)\r\n  }\r\n}\r\n\r\nexport const normal: IPlayCard = ({ card }, playerId) => state => {\r\n  if (isNormalCard(card)) {\r\n    const points = state.points + cardPoints[card.number]\r\n    if (points > 99) {\r\n      throw new Error(`playing ${printCard(card)} will exceed 99`)\r\n    }\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)}, +${cardPoints[card.number]}`)(withEndTurn(withIncrementTurn({ ...state, points })))\r\n  }\r\n  return state\r\n}\r\n","import { ICard, IPlayCard, IsCard } from '../types'\r\nimport { cardPoints } from '../constants'\r\nimport { withEndTurn, withIncrementTurn, withLog } from '../Poker99Reducer'\r\nimport { printCard } from '../utils'\r\n\r\nexport const isPmCard: IsCard = (card: ICard): boolean => {\r\n  return card.number === 10 || card.number === 12\r\n}\r\n\r\nexport const pm: IPlayCard = ({ card, increase }, playerId) => state => {\r\n  if (isPmCard(card)) {\r\n    if (increase === undefined) {\r\n      throw new Error('increase is required in payload')\r\n    }\r\n    const delta = increase ? cardPoints[card.number] : -cardPoints[card.number]\r\n    const points = state.points + delta\r\n    if (points > 99) {\r\n      throw new Error(`playing ${printCard(card)} will exceed 99`)\r\n    }\r\n    return withLog(`${state.players[playerId]} played ${printCard(card)} ${delta}`)(withEndTurn(withIncrementTurn({ ...state, points })))\r\n  }\r\n  return state\r\n}\r\n","import { NetworkReducer } from 'smnet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { PlayCardPayload, Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { IDeck, IPlayCard, IStateMapper, ISuit } from './types'\r\nimport { compose, GameActionTypes, shuffle } from 'gamenet'\r\nimport { maxCard } from './constants'\r\nimport { minPossible } from './utils'\r\nimport { bomb } from './cards/bomb'\r\nimport { normal } from './cards/normal'\r\nimport { pm } from './cards/pm'\r\nimport { reverse } from './cards/reverse'\r\nimport { skip } from './cards/skip'\r\nimport { target } from './cards/target'\r\nimport { spade1 } from './cards/spade1'\r\n\r\nconst getFullDeck = (): IDeck => {\r\n  const deck: IDeck = []\r\n  for (let suit = 0; suit < 4; suit++) {\r\n    for (let number = 1; number <= 13; number++) {\r\n      deck.push({ suit, number })\r\n    }\r\n  }\r\n  return deck\r\n}\r\n\r\nconst withDrawCard: (playerId: number) => IStateMapper = playerId => prevState => {\r\n  if (prevState.playerDeck[playerId].length >= maxCard) {\r\n    throw new Error(`cannot draw, ${prevState.players[playerId]} already has ${maxCard} cards`)\r\n  }\r\n  const card = prevState.drawDeck.shift()\r\n  if (card === undefined) {\r\n    return withDrawCard(playerId)({ ...prevState, drawDeck: shuffle(prevState.trashDeck), trashDeck: [] })\r\n  } else {\r\n    prevState.playerDeck[playerId].push(card)\r\n    return { ...prevState }\r\n  }\r\n}\r\n\r\nconst withInitGame: IStateMapper = (prevState: Poker99State) => {\r\n  prevState = {\r\n    ...prevState,\r\n    drawDeck: [],\r\n    trashDeck: [],\r\n    playerDeck: [],\r\n    points: 0,\r\n    direction: 1,\r\n    turn: 0,\r\n    dead: {},\r\n    logs: ['game started'],\r\n    winner: null\r\n  }\r\n  prevState.drawDeck = shuffle(getFullDeck())\r\n  for (let id = 0; id < prevState.players.length; id++) {\r\n    prevState.playerDeck[id] = []\r\n    for (let k = 0; k < maxCard; k++) {\r\n      prevState = withDrawCard(id)(prevState)\r\n    }\r\n  }\r\n  return { ...prevState }\r\n}\r\n\r\nconst withDiscardCard: IPlayCard = ({ card }, playerId) => state => {\r\n  state.trashDeck.push(card)\r\n  state.playerDeck[playerId] = state.playerDeck[playerId].filter(({ suit, number }) => !(suit === card.suit && number === card.number))\r\n  return state\r\n}\r\n\r\nconst withPlayCard: (playerId: number, payload: PlayCardPayload) => IStateMapper = (playerId, payload) => prevState => {\r\n  const { card } = payload\r\n  const cardStr = `${ISuit[card.suit]}${card.number}`\r\n  if (prevState.playerDeck[playerId].find(({ suit, number }) => suit === card.suit && number === card.number) === undefined) {\r\n    throw new Error(`${prevState.players[playerId]} doesnt own card ${cardStr}`)\r\n  }\r\n  if (prevState.turn !== playerId) {\r\n    throw new Error('not your turn')\r\n  }\r\n  const nextState = compose(\r\n    withDrawCard(playerId),\r\n    ...[withDiscardCard, bomb, normal, pm, reverse, skip, target, spade1].map(playCard => playCard(payload, playerId))\r\n  )(prevState)\r\n  return { ...nextState, lastAction: { ...payload, playerId } }\r\n}\r\n\r\nexport const withIncrementTurn: IStateMapper = prevState => {\r\n  const nextPlayerId = (prevState.turn + prevState.maxPlayer + prevState.direction) % prevState.maxPlayer\r\n  return { ...prevState, turn: nextPlayerId }\r\n}\r\n\r\nexport const withEndTurn: IStateMapper = prevState => {\r\n  if (!prevState.dead[prevState.turn] && minPossible(prevState.points, prevState.playerDeck[prevState.turn])[0] > 99) {\r\n    prevState.logs.push(`${prevState.players[prevState.turn]} die, his card: ${prevState.playerDeck[prevState.turn].map(card => (\r\n      `${ISuit[card.suit]}${card.number}`)\r\n    ).join(',')}`)\r\n    prevState.dead[prevState.turn] = true\r\n  }\r\n  if (Object.keys(prevState.dead).length === prevState.players.length - 1 && prevState.started) {\r\n    prevState.winner = [0, 1, 2, 3].filter(k => !prevState.dead[k])[0]\r\n  }\r\n  if (prevState.dead[prevState.turn]) {\r\n    return withEndTurn(withIncrementTurn({ ...prevState, turn: prevState.turn }))\r\n  } else {\r\n    return { ...prevState, turn: prevState.turn }\r\n  }\r\n}\r\n\r\nexport const withLog: (log: string)=> IStateMapper = log => prevState => {\r\n  return {...prevState, logs: [...prevState.logs, log]}\r\n}\r\n\r\nexport const Poker99Reducer: NetworkReducer<Poker99State, Poker99Action> = (prevState, action) => {\r\n  const peerId = action.peerId\r\n  if (peerId === undefined) {\r\n    throw new Error('Expect peerId in action')\r\n  }\r\n  const playerId = (): number => {\r\n    const id = prevState.nameDict[prevState.members[peerId]]\r\n    if (id === undefined) {\r\n      throw new Error('game not started')\r\n    }\r\n    return id\r\n  }\r\n  switch (action.type) {\r\n    case GameActionTypes.START:\r\n      return withInitGame(prevState)\r\n    case Poker99ActionType.PLAY_CARD:\r\n      return withPlayCard(playerId(), action.payload)(JSON.parse(JSON.stringify(prevState)))\r\n    case Poker99ActionType.END:\r\n      return { ...prevState, started: false }\r\n  }\r\n  return prevState\r\n}\r\n","import { Poker99State } from './Poker99State'\r\nimport { Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { ICard } from './types'\r\nimport { cardPoints } from './constants'\r\nimport { shuffle } from 'gamenet'\r\nimport { isNormalCard } from './cards/normal'\r\nimport { isPmCard } from './cards/pm'\r\nimport { isSpade1Card } from './cards/spade1'\r\n\r\nconst isSkippingCard = (card: ICard): boolean => {\r\n  return [4, 5, 11, 13].includes(card.number)\r\n}\r\n\r\nexport const aiAction = (state: Poker99State, turn: number): Poker99Action => {\r\n  const cards = state.playerDeck[turn]\r\n  const points = state.points\r\n  const normalCards = cards.filter(isNormalCard).sort((a, b) => cardPoints[b.number] - cardPoints[a.number])\r\n\r\n  // play bomb if have less than 3 normal card\r\n  const card13 = cards.find(c => c.number === 13)\r\n  if (card13 !== undefined) {\r\n    if (points !== 99 && normalCards.length < 3) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card: card13\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // play normal card if it wont exceed 99\r\n  for (const card of normalCards) {\r\n    if ((points + cardPoints[card.number]) <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  // play pm card  for plus if it wont exceed 99\r\n  const pmCards = cards.filter(isPmCard)\r\n  for (const card of pmCards.sort((a, b) => b.number - a.number)) {\r\n    if (points + cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: true\r\n        }\r\n      })\r\n    }\r\n  }\r\n  {\r\n    // play skipping card if point is huge\r\n    const card = cards.find(isSkippingCard)\r\n    if (card !== undefined) {\r\n      return {\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          target: state.nameDict[shuffle(state.players.filter((name, id) => !state.dead[id] && id !== turn))[0]]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // if no skipping card then play pm card in minus\r\n  for (const card of pmCards.sort((a, b) => a.number - b.number)) {\r\n    if (points - cardPoints[card.number] <= 99) {\r\n      return ({\r\n        type: Poker99ActionType.PLAY_CARD,\r\n        payload: {\r\n          card,\r\n          increase: false\r\n        }\r\n      })\r\n    }\r\n  }\r\n  const spade1 = cards.find(isSpade1Card)\r\n  if(spade1 !== undefined) {\r\n    return ({\r\n      type: Poker99ActionType.PLAY_CARD,\r\n      payload: {\r\n        card: spade1\r\n      }\r\n    })\r\n  }\r\n  throw new Error('reached an edge case')\r\n}\r\n","import React, { createContext, FunctionComponent, useContext, useEffect } from 'react'\r\nimport { BoardGameContextInterface, useBoardGameNetwork } from 'gamenet'\r\nimport { Poker99State } from './Poker99State'\r\nimport { Poker99Reducer } from './Poker99Reducer'\r\nimport { Poker99Action } from './Poker99Action'\r\nimport { aiAction } from './aiAction'\r\n\r\nconst Poker99Context = createContext<BoardGameContextInterface<Poker99State, Poker99Action> | null>(null)\r\n\r\nexport const withPoker99Network = (Component: FunctionComponent): FunctionComponent => {\r\n  const WithGameNetwork: FunctionComponent = props => {\r\n    const network = useBoardGameNetwork(Poker99Reducer, new Poker99State())\r\n    const {myAis, state,dispatchAs} = network\r\n    useEffect(() => {\r\n      if (aiAction !== undefined && myAis.includes(state.players[state.turn]) && state.started && state.winner === null) {\r\n        const cb = (): void => {\r\n          const action = aiAction(state, state.turn)\r\n          // action.peerId = Object.keys(state.members).filter(peerId => state.members[peerId] === state.players[state.turn])[0]\r\n          dispatchAs(state.turn, action).catch(console.error)\r\n        }\r\n        const n = window.setTimeout(cb, 1000)\r\n        return () => {\r\n          window.clearTimeout(n)\r\n        }\r\n      }\r\n    }, [dispatchAs, myAis, state])\r\n    return (\r\n      <Poker99Context.Provider value={network}>\r\n        <Component {...props} />\r\n    </Poker99Context.Provider>\r\n  )\r\n  }\r\n  WithGameNetwork.displayName = 'WithGameNetwork'\r\n  return WithGameNetwork\r\n}\r\n\r\nexport const usePoker99 = (): BoardGameContextInterface<Poker99State, Poker99Action> => {\r\n  const network: BoardGameContextInterface<Poker99State, Poker99Action> | null = useContext(Poker99Context)\r\n  if (network === null) {\r\n    throw new Error('please wrap it using withPoker99Network before calling this hook')\r\n  }\r\n  return network\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { ICard } from '../types'\r\nimport { makeStyles, Paper } from '@material-ui/core'\r\nimport { numberString, suitColor, suitString } from '../constants'\r\nimport { hintText } from '../utils'\r\n\r\nconst useStyle = makeStyles(() => ({\r\n  root: {\r\n    padding: '16px',\r\n    width: '110px',\r\n    height: '160px',\r\n    borderRadius: '8px',\r\n    cursor: 'pointer',\r\n    userSelect: 'none',\r\n    transition: 'transform 0.1s ease-in-out',\r\n    transformOrigin: 'center',\r\n    '&:hover': {\r\n      // transform: 'translateY(-50%)'\r\n    }\r\n  }\r\n}))\r\n\r\nexport const Card: FunctionComponent<{ card: ICard, onClick?: () => void, disabled?: boolean, style?: Record<string, unknown> }> = ({ style, card, card: { suit, number }, onClick, disabled }) => {\r\n  const classes = useStyle()\r\n\r\n  return (\r\n    <Paper elevation={4} style={{color: suitColor[suit], pointerEvents: disabled ? 'none' : 'auto', ...style}} className={classes.root} onClick={!disabled ? onClick : undefined}>\r\n      <h2 style={{fontFamily: 'Big Shoulders Inline Text, inherit', margin: 0}}>\r\n        <div>\r\n          {numberString[number]}\r\n        </div>\r\n        <div>\r\n          {suitString[suit]}\r\n        </div>\r\n      </h2>\r\n      <div>\r\n        {hintText(card)}\r\n      </div>\r\n    </Paper>\r\n  )\r\n}\r\n","import React, { FunctionComponent, ReactNode, useEffect, useState } from 'react'\r\nimport { ICard } from '../types'\r\nimport { Card } from './Card'\r\nimport { Grid, IconButton } from '@material-ui/core'\r\nimport { Visibility } from '@material-ui/icons'\r\n\r\nconst PlaceHolder: FunctionComponent<{ reverse?: boolean, card?: ICard }> = ({ reverse, card }) => {\r\n  const [width, setWidth] = useState(reverse ? '0' : '158px')\r\n  const [startAnimation, setStartAnimation] = useState(false)\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setWidth(reverse ? '158px' : '0')\r\n      setStartAnimation(true)\r\n    }, 1)\r\n  }, [reverse])\r\n  return (\r\n    <div style={{\r\n      maxWidth: width,\r\n      minWidth: width,\r\n      transition: 'min-width 0.3s ease-in-out',\r\n      position: 'relative'\r\n    }}>\r\n      {card && <div style={{\r\n        transform: startAnimation ? 'translateX(0)' : 'translateX(100vw)',\r\n        transition: 'transform 0.3s ease-in-out',\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        margin: '8px'\r\n      }}>\r\n        <Card card={card} disabled/>\r\n      </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Deck: FunctionComponent<{ cards: ICard[], hide: boolean, reveal: () => void, onCardClick: (card: ICard) => Promise<void> }> = ({ cards, onCardClick, hide, reveal }) => {\r\n  const [playedIndex, setPlayedIndex] = useState(-1)\r\n  const [hovering, setHovering] = useState<number | null>(null)\r\n  const handleCardClick = async (card: ICard, index: number) => {\r\n    onCardClick(card)\r\n      .then(() => {\r\n        setHovering(null)\r\n        setPlayedIndex(index)\r\n        setTimeout(() => {\r\n          setPlayedIndex(-1)\r\n        }, 500)\r\n      })\r\n      .catch(e => console.error(e.message))\r\n  }\r\n  const withMaxWidth = (children: ReactNode, index: number, noPad = false) => (\r\n    <div\r\n      style={{\r\n        padding: noPad ? 0 : '8px',\r\n        maxWidth: hovering === null\r\n          ? 'calc(100% / 6)'\r\n          : hovering === index ? '142px' : 'calc((100% - 142px) / 5)',\r\n        transition: 'max-width 0.1s ease-in-out'\r\n      }}\r\n      onMouseEnter={() => setHovering(index)}\r\n      onTouchStart={() => setHovering(index)}\r\n      onMouseLeave={() => setHovering(null)}\r\n      onTouchEnd={() => setHovering(null)}>\r\n      {children}\r\n    </div>\r\n  )\r\n  return <div style={{\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    zIndex: 1,\r\n    transform: hide ? 'translateY(100%)' : 'translateY(50%)',\r\n    transition: 'transform 0.3s ease-in-out',\r\n    pointerEvents: 'none'\r\n  }}>\r\n    {hide && <IconButton onClick={reveal} style={{\r\n      transform: 'translateY(-100%)',\r\n      margin: 'auto',\r\n      display: 'block',\r\n      pointerEvents: 'all'\r\n    }}><Visibility/></IconButton>}\r\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'nowrap' }}>\r\n      {cards.map((card, index) => (\r\n        <>\r\n          {index === playedIndex &&\r\n          withMaxWidth(<PlaceHolder/>, index, true)\r\n          }\r\n          {playedIndex !== -1 && index === 4\r\n            ? withMaxWidth(<PlaceHolder reverse={true} card={card}/>, index, true)\r\n            : withMaxWidth(<Grid item key={card.number * 10 + card.suit}>\r\n              <Card card={card} onClick={() => handleCardClick(card, index)} disabled={hide} style={{transform: hovering === index ? 'translateY(-50%)' : undefined}}/>\r\n            </Grid>, index)\r\n          }\r\n        </>\r\n      ))}\r\n    </div>\r\n  </div>\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid } from '@material-ui/core'\r\nimport { ICard } from '../types'\r\nimport { PlayCardPayload } from '../Poker99Action'\r\n\r\nexport const PlayCardAdditionalModal: FunctionComponent<{ open: boolean, onClose: (playCardPayload?: PlayCardPayload) => void, card: ICard, targets: Array<[number, string]> }> = ({ open, onClose, card, targets }) => {\r\n  const chooseIncrease = (increase: boolean) => (): void => {\r\n    onClose({ card, increase })\r\n  }\r\n  const chooseTarget = (target: number) => (): void => {\r\n    onClose({ card, target })\r\n  }\r\n  return (\r\n    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n      <DialogTitle>\r\n        {\r\n          card.number === 5 ? 'Please choose target' : 'Please choose'\r\n        }\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        {\r\n          card.number === 10\r\n            ? (\r\n              <Grid container>\r\n                <Grid item><Button onClick={chooseIncrease(false)}> -10 </Button></Grid>\r\n                <Grid item><Button onClick={chooseIncrease(true)}> +10 </Button></Grid>\r\n              </Grid>\r\n            ) :\r\n            card.number === 12\r\n              ? (\r\n                <Grid container>\r\n                  <Grid item><Button onClick={chooseIncrease(false)}> -20 </Button></Grid>\r\n                  <Grid item><Button onClick={chooseIncrease(true)}> +20 </Button></Grid>\r\n                </Grid>\r\n              ) :\r\n              card.number === 5\r\n                ? (\r\n                  <Grid container>\r\n                    {targets.map(([playerId, name]) => <Button key={name} onClick={chooseTarget(playerId)}>{name}</Button>)}\r\n                  </Grid>\r\n                ) :\r\n                null\r\n        }\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={() => onClose()} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport { usePoker99 } from './withPoker99Network'\r\nimport { PlayCardPayload, Poker99Action, Poker99ActionType } from './Poker99Action'\r\nimport { Deck } from './components/Deck'\r\nimport { ICard, ISuit } from './types'\r\nimport { isPmCard } from './cards/pm'\r\nimport { PlayCardAdditionalModal } from './components/PlayCardAdditionalModal'\r\nimport { cardPoints } from './constants'\r\nimport { isTargetCard } from './cards/target'\r\nimport { usePromise } from './usePromise'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core'\r\n\r\nexport const Game: FunctionComponent = () => {\r\n  const {\r\n    state,\r\n    dispatch,\r\n    dispatchAs,\r\n    myPlayerId,\r\n    myLocals,\r\n    hideDeck,\r\n    setHideDeck,\r\n    error,\r\n    setError,\r\n    renderedDeckId\r\n  } = usePoker99()\r\n  const [throttledRenderedId, setTrottledRenderedId] = useState(renderedDeckId)\r\n  const handleError = (e: Error): void => {\r\n    setError(e.message)\r\n  }\r\n  const playCard = async (payload: PlayCardPayload) => {\r\n    const action: Poker99Action = {\r\n      type: Poker99ActionType.PLAY_CARD,\r\n      payload\r\n    }\r\n    if (state.turn === myPlayerId) {\r\n      await dispatch(action).then(() => setError(''))\r\n    } else if (myLocals.includes(state.players[state.turn])) {\r\n      await dispatchAs(state.turn, action).then(() => setError(''))\r\n    } else {\r\n      throw new Error('Not my turn')\r\n    }\r\n    if (myLocals.length > 0) {\r\n      setHideDeck(true)\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTrottledRenderedId(renderedDeckId)\r\n    }, 500)\r\n  }, [renderedDeckId])\r\n  const targets: Array<[number, string]> = state.players.map((name, id) => [id, name] as [number, string]).filter(([id]) => id !== throttledRenderedId && !state.dead[id])\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: Poker99ActionType.END\r\n    }).catch(handleError)\r\n  }\r\n  const [modalCard, setModalCard] = useState<null | ICard>(null)\r\n  const [{ resolve, reject }, makePromise] = usePromise<void>()\r\n  const handleCardClick = async (card: ICard) => {\r\n    try {\r\n      if (isPmCard(card)) {\r\n        if (cardPoints[card.number] + state.points <= 99) {\r\n          setModalCard(card)\r\n          await makePromise()\r\n        } else {\r\n          await playCard({\r\n            card,\r\n            increase: false\r\n          })\r\n        }\r\n      } else if (isTargetCard(card)) {\r\n        if (targets.length === 1) {\r\n          await playCard({\r\n            card,\r\n            target: targets[0][0]\r\n          })\r\n        } else {\r\n          setModalCard(card)\r\n          await makePromise()\r\n        }\r\n      } else {\r\n        await playCard({ card })\r\n      }\r\n    } catch (e) {\r\n      handleError(e)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  const handleModalClose = (payload?: PlayCardPayload) => {\r\n    if (payload !== undefined) {\r\n      playCard(payload).then(resolve).catch(handleError).catch(reject)\r\n    } else {\r\n      reject?.(new Error('the operation is cancelled'))\r\n    }\r\n    setModalCard(null)\r\n  }\r\n  return (\r\n    <div style={{ pointerEvents: 'all' }}>\r\n      {state.started && myPlayerId !== undefined &&\r\n      <Deck\r\n        cards={state.playerDeck[throttledRenderedId ?? myPlayerId]}\r\n        onCardClick={handleCardClick}\r\n        hide={hideDeck}\r\n        reveal={() => setHideDeck(false)}\r\n      />}\r\n      <div style={{ maxHeight: '50%' }}>\r\n        {state.winner !== undefined && state.winner !== null && <div>winner is {state.players[state.winner]}\r\n          <button onClick={again}>again</button>\r\n        </div>}\r\n        {state.logs.slice().reverse().map((s, k) => <div key={k}>{s}</div>)}\r\n      </div>\r\n      <PlayCardAdditionalModal\r\n        open={modalCard !== null}\r\n        card={modalCard ?? { suit: ISuit.SPADE, number: 0 }}\r\n        onClose={handleModalClose}\r\n        targets={targets}\r\n      />\r\n      <Dialog open={error !== ''} onClose={() => setError('')} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle>Error</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {error}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setError('')} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\n\r\nexport const usePromise = <T, E extends Error = Error>(): [{resolve?: (t: T) => void, reject?: (e: E) => void}, () => Promise<T>] => {\r\n  const [{resolve, reject}, setPromise] = useState<{resolve?: (t: T) => void, reject?: (e: E) => void}>({})\r\n  const makePromise = async (): Promise<T> => {\r\n    return await new Promise((resolve, reject) => {\r\n      setPromise({resolve, reject})\r\n    })\r\n  }\r\n  return [{resolve, reject}, makePromise]\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { usePoker99 } from '../withPoker99Network'\r\nimport { PlayCardPayload, Poker99ActionType } from '../Poker99Action'\r\nimport { Card } from './Card'\r\nimport { Autorenew, Bomb } from 'mdi-material-ui'\r\nimport { Loop } from '@material-ui/icons'\r\n\r\nexport const GameRenderer = () => {\r\n  const { state, myPlayerId, dispatch } = usePoker99()\r\n  const [prevCardPayload, setPrevCardPayload] = useState<null | (PlayCardPayload & { playerId: number })>(null)\r\n  const [startAnimateCard, setStartAnimateCard] = useState(false)\r\n  const [showAnimateCard, setShowAnimateCard] = useState(false)\r\n  useEffect(() => {\r\n    setShowAnimateCard(true)\r\n    setTimeout(() => {\r\n      setStartAnimateCard(true)\r\n    }, 1)\r\n    setTimeout(() => {\r\n      setPrevCardPayload(state.lastAction)\r\n      setStartAnimateCard(false)\r\n      setShowAnimateCard(false)\r\n    }, 300)\r\n  }, [state.lastAction])\r\n  const m4 = (id: number): number => id % 4\r\n  const origins: Array<Record<string, string>> = [{\r\n    top: '100%',\r\n    left: '50%',\r\n    bottom: '0',\r\n    right: '50%'\r\n  }, {\r\n    left: '0',\r\n    top: '50%',\r\n    right: '100%',\r\n    bottom: '50%'\r\n  }, {\r\n    top: '0',\r\n    left: '50%',\r\n    bottom: '100%',\r\n    right: '50%'\r\n  }, {\r\n    left: '100%',\r\n    top: '50%',\r\n    bottom: '50%',\r\n    right: '0'\r\n  }]\r\n  const center = {\r\n    top: '50%', left: '50%', right: '50%', bottom: '50%'\r\n  }\r\n  const Name = useCallback(({ offset }) => {\r\n    const style = [\r\n      {\r\n        left: '50%',\r\n        bottom: '0',\r\n        transform: 'translateX(-50%)'\r\n      },\r\n      {\r\n        left: '40px',\r\n        top: '50%'\r\n      }, {\r\n        top: 0,\r\n        left: '50%',\r\n        transform: 'translateX(-50%)'\r\n      }, {\r\n        right: '40px',\r\n        top: '50%'\r\n      }]\r\n    const playerId = m4((myPlayerId ?? 0) + offset)\r\n    const isHisTurn = state.turn === playerId\r\n    return <h1\r\n      style={{\r\n        textDecorationLine: state.dead[playerId] ? 'line-through' : undefined,\r\n        position: 'absolute',\r\n        color: isHisTurn ? 'red' : 'white',\r\n        ...style[offset]\r\n      }}>{state.players[playerId]}{isHisTurn ? ' ←' : ''}</h1>\r\n  }, [myPlayerId, state.dead, state.players, state.turn])\r\n  const again = async (): Promise<void> => {\r\n    await dispatch({\r\n      type: Poker99ActionType.END\r\n    }).catch(console.error)\r\n  }\r\n  return (\r\n    !state.started\r\n      ? <div\r\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}\r\n      />\r\n      : <div\r\n        style={{ backgroundColor: 'green', position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, color: 'white' }}>\r\n        {myPlayerId === undefined && <Name offset={0}/>}\r\n        <Name offset={1}/>\r\n        <Name offset={2}/>\r\n        <Name offset={3}/>\r\n        <h1 style={{ position: 'absolute', left: '50%', top: 'calc(50% - 192px)', transform: 'translateX(-50%)' }}>\r\n          <Bomb/>: {state.points}/99\r\n        </h1>\r\n        {prevCardPayload !== null &&\r\n        <div style={{ position: 'absolute', ...center }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', width: '142px', height: '192px' }}>\r\n            <Card card={prevCardPayload.card} disabled/>\r\n          </div>\r\n        </div>}\r\n        {showAnimateCard && state.lastAction !== null && <div style={{\r\n          position: 'absolute',\r\n          ...(startAnimateCard ? center : origins[m4(state.lastAction.playerId - myPlayerId + 4)]),\r\n          transform: state.lastAction !== prevCardPayload ? 'translate(-50%,-50%)' : undefined,\r\n          transition: ['top', 'bottom', 'left', 'right'].map(s => `${s} 0.2s ease-in-out`).join(',')\r\n        }}>\r\n          <div style={{ transform: 'translate(-50%,-50%)', width: '142px', height: '192px' }}>\r\n            <Card card={state.lastAction.card} disabled/>\r\n          </div>\r\n        </div>}\r\n        <div style={{\r\n          position: 'absolute',\r\n          left: '50%',\r\n          bottom: 'calc(50% - 192px - 4em)',\r\n          transform: 'translateX(-50%)',\r\n          textAlign: 'center'\r\n        }}>\r\n          {!state.dead[myPlayerId] && <h1 style={{ color: state.turn === myPlayerId ? 'red' : 'white' }}>\r\n            {state.turn === myPlayerId ? 'My Turn' : `${state.players[state.turn]}'s turn`}\r\n          </h1>}\r\n          {state.dead[myPlayerId] && <h1 style={{ color: 'red' }}>You Died</h1>}\r\n          {state.winner !== undefined && state.winner !== null && <div>winner is {state.players[state.winner]}\r\n            <button onClick={again}>again</button>\r\n          </div>}\r\n          <div>\r\n            Direction: {state.direction === 1 ? <Autorenew fontSize='large'/> : <Loop fontSize='large'/>}\r\n          </div>\r\n        </div>\r\n        <h3 style={{ position: 'absolute', bottom: 0, right: '20px' }}>Draw Deck: {state.drawDeck.length}</h3>\r\n      </div>\r\n  )\r\n}\r\n","import { en } from './en'\r\nimport { zh } from './zh'\r\n\r\nexport const i18ns = {\r\n  en,\r\n  zh\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\n\r\nexport const en = {\r\n  ...gamenetI18n.en,\r\n  poker99: 'poker99',\r\n  howToPlay: 'How To Play',\r\n  howToPlayContent: (\r\n    <div>\r\n      <h3>Control</h3>\r\n      <div>\r\n        Everyone have 5 cards at the beginning,\r\n        the system will decide the beginning player,\r\n        and then every player take turn to play card in clockwise direction,\r\n        whenever play a card, you get one card back,\r\n        unless playing cards with special functionality,\r\n        points on card will add to the \"BOMB\" point,\r\n        and \"BOMB\" can reach 99 point at max.\r\n      </div>\r\n      <h3>BOMB! condition</h3>\r\n      <div>\r\n        When a player cannot play any card that wont exceed 99 at his turn, he will be BOMB away!\r\n      </div>\r\n      <h3>Winning</h3>\r\n      <div>You win if you are the only player left</div>\r\n      <h3>Card rules</h3>\r\n      <div>\r\n        <ul>\r\n          <li>1, 2, 3, 6, 7, 8, 9: Add the points on card to BOMB</li>\r\n          <li>4: Reverse the turn direction(like clockwise-{'>'}anticlockwise)</li>\r\n          <li>5: Change turn to any specific player except himself</li>\r\n          <li>10: Plus or minus 10 to BOMB</li>\r\n          <li>J: PASS</li>\r\n          <li>Q: Plus or minus 20 to BOMB</li>\r\n          <li>K: Set BOMB to 99</li>\r\n          <li>Spade1: Set BOMB to 1</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { gamenetI18n } from 'gamenet-material'\r\nimport React from 'react'\r\n\r\nexport const zh = {\r\n  ...gamenetI18n.zh,\r\n  poker99: '童話99',\r\n  howToPlay: '玩法',\r\n  howToPlayContent: (\r\n    <div>\r\n      <h3>操作說明</h3>\r\n      <div>\r\n        一開始每個人會分得五張牌,\r\n        由電腦隨機決定第一個出牌者,\r\n        之後每個玩家依順時鐘方向輪流出牌,\r\n        每出一張牌會再分得一張牌,\r\n        出牌後除了某些擁有特殊功能的牌之外,\r\n        牌上的點數會累加到目前的 \"累積分數\",\r\n        \"累積分數\" 最大只能到99~\r\n      </div>\r\n      <h3>出局條件</h3>\r\n      <div>\r\n        當輪到某位玩家出牌而該玩家沒有任何牌能使 \"累積分數\" 小於等於99, 則該玩家就會被判出局~\r\n      </div>\r\n      <h3>優勝條件</h3>\r\n      <div>單局遊戲剩下最後一位沒出局的玩家即為優勝者!!</div>\r\n      <h3>牌面規則</h3>\r\n      <div>\r\n        <ul>\r\n          <li>1, 2, 3, 6, 7, 8, 9: \"累積分數\" 加上牌面點數</li>\r\n          <li>4: 更改目前玩家輪流方向(如: 順時鐘-{'>'}逆時鐘)</li>\r\n          <li>5: 指定某位玩家(自己除外)出牌</li>\r\n          <li>10: \"累積分數\" 加或減10</li>\r\n          <li>J: PASS, 跳過自己換下一個玩家</li>\r\n          <li>Q: \"累積分數\" 加或減20</li>\r\n          <li>K: \"累積分數\" 直接加到99</li>\r\n          <li>黑桃1: \"累積分數\" 歸一</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { FunctionComponent } from 'react'\nimport { usePoker99, withPoker99Network } from './withPoker99Network'\nimport { GamePagesSlider, Home, LanguageButton, Room, useGamenetI18n, withGamenetI18n } from 'gamenet-material'\nimport { Game } from './Game'\nimport { GameRenderer } from './components/GameRenderer'\nimport { i18ns } from './i18ns'\nimport { DialogContent } from '@material-ui/core'\n\nconst App: FunctionComponent = withGamenetI18n({ i18ns })(withPoker99Network(() => {\n  const network = usePoker99()\n  const { i18n } = useGamenetI18n()\n  return (\n    <GamePagesSlider gameAppState={network.gameAppState} fullPage={[false, false, true]} GameRenderer={<GameRenderer/>}>\n      <Home {...network} gameName='Poker99'>\n        <DialogContent>\n          <h2>{i18n.howToPlay}</h2>\n          <div>{i18n.howToPlayContent}</div>\n        </DialogContent>\n      </Home>\n      <Room {...network} />\n      <Game/>\n      <div style={{ position: 'fixed', top: 0, right: 0, zIndex: 100 }}>\n        <LanguageButton/>\n      </div>\n    </GamePagesSlider>\n  )\n}))\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}